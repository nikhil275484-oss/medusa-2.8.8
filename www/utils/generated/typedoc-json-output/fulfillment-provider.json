{
	"id": 42124,
	"name": "fulfillment-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 42125,
			"name": "AbstractFulfillmentProviderService",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the [module's container](https://docs.medusajs.com/learn/fundamentals/modules/container)\nusing the first parameter, and the module's options using the second parameter.\n\n:::note\n\nA module's options are passed when you register it in the Medusa application.\n\n:::\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts title=\"src/modules/my-fulfillment/service.ts\"\nimport { AbstractFulfillmentProviderService } from \"@medusajs/framework/utils\"\nimport { Logger } from \"@medusajs/framework/types\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n// other properties...\n  protected logger_: Logger\n  protected options_: Options\n  // assuming you're initializing a client\n  protected client\n\n  constructor(\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super()\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // TODO initialize your client\n  }\n}\n\nexport default MyFulfillmentProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 42126,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Each fulfillment provider has a unique identifier defined in its class. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`fp_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": "\nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  static identifier = \"my-fulfillment\"\n\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 80,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L80"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 42131,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 42132,
							"name": "AbstractFulfillmentProviderService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 42125,
								"name": "AbstractFulfillmentProviderService",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 42135,
					"name": "getFulfillmentOptions",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 131,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L131"
						}
					],
					"signatures": [
						{
							"id": 42136,
							"name": "getFulfillmentOptions",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves a list of fulfillment options that this provider supports. Admin users will then choose from these options when\nthey're creating a shipping option. The chosen fulfillment option's object is then stored within the created shipping option's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property is useful to store data relevant for the third-party provider to later process the fulfillment.\n\nThis method is useful if your third-party provider allows you to retrieve support options, carriers, or services from an API. You can then\nretrieve those and return then in the method, allowing the admin user to choose from the services provided by the third-party provider."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The list of fulfillment options. Each object in the array should have an "
											},
											{
												"kind": "code",
												"text": "`id`"
											},
											{
												"kind": "text",
												"text": " property unique to an item, and a "
											},
											{
												"kind": "code",
												"text": "`name`"
											},
											{
												"kind": "text",
												"text": " property\nthat's used to display the option in the admin."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\n// other imports...\nimport { FulfillmentOption } from \"@medusajs/framework/types\"\n\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getFulfillmentOptions(): Promise<FulfillmentOption[]> {\n    // assuming you have a client\n    const services = await this.client.getServices()\n\n    return services.map((service) => ({\n      id: service.service_id,\n      name: service.name,\n      service_code: service.code,\n      // can add other relevant data for the provider to later process the shipping option.\n    }))\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 131,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L131"
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
												"qualifiedName": "FulfillmentOption"
											},
											"name": "FulfillmentOption",
											"package": "@medusajs/types"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getFulfillmentOptions"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getFulfillmentOptions"
					}
				},
				{
					"id": 42137,
					"name": "validateFulfillmentData",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 167,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L167"
						}
					],
					"signatures": [
						{
							"id": 42138,
							"name": "validateFulfillmentData",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of a shipping method and returns it. The returned data\nis stored in the shipping method's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nYour fulfillment provider can use the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property to store additional information useful for\nhandling the fulfillment later. For example, you may store an ID from the third-party fulfillment\nsystem."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "the data to store in the "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async validateFulfillmentData(\n    optionData: any,\n    data: any,\n    context: any\n  ): Promise<any> {\n    // assuming your client retrieves an ID from the\n    // third-party service\n    const externalId = await this.client.getId()\n\n    return {\n      ...data,\n      externalId\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 167,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L167"
								}
							],
							"parameters": [
								{
									"id": 42139,
									"name": "optionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42140,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42141,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "Context details, such as context of the cart or customer."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
											"qualifiedName": "ValidateFulfillmentDataContext"
										},
										"name": "ValidateFulfillmentDataContext",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.validateFulfillmentData"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.validateFulfillmentData"
					}
				},
				{
					"id": 42142,
					"name": "validateOption",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 192,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L192"
						}
					],
					"signatures": [
						{
							"id": 42143,
							"name": "validateOption",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of a shipping option when it's created.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property can hold useful information that's later added to the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " attribute\nof shipping methods created from this option."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the data is valid."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async validateOption(data: any): Promise<boolean> {\n    return data.external_id !== undefined\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 192,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L192"
								}
							],
							"parameters": [
								{
									"id": 42144,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The data to validate."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.validateOption"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.validateOption"
					}
				},
				{
					"id": 42145,
					"name": "canCalculate",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 215,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L215"
						}
					],
					"signatures": [
						{
							"id": 42146,
							"name": "canCalculate",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method validates whether a shippin option's price can be calculated during checkout. It's executed when the admin user creates a shipping\noption of type "
									},
									{
										"kind": "code",
										"text": "`calculated`"
									},
									{
										"kind": "text",
										"text": ". If this method returns "
									},
									{
										"kind": "code",
										"text": "`false`"
									},
									{
										"kind": "text",
										"text": ", an error is thrown as the shipping option's price can't be calculated.\n\nYou can perform the checking using the third-party provider if applicable. The "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " parameter will hold the shipping option's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, which\nincludes the data of a fulfillment option returned by "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "getFulfillmentOptions",
										"target": 42135
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Whether the price can be calculated for the shipping option."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async canCalculate(data: CreateShippingOptionDTO): Promise<boolean> {\n    // assuming you have a client\n    return await this.client.hasRates(data.id)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 215,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L215"
								}
							],
							"parameters": [
								{
									"id": 42147,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/fulfillment/mutations/shipping-option.ts",
											"qualifiedName": "CreateShippingOptionDTO"
										},
										"name": "CreateShippingOptionDTO",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "boolean"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.canCalculate"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.canCalculate"
					}
				},
				{
					"id": 42148,
					"name": "calculatePrice",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 257,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L257"
						}
					],
					"signatures": [
						{
							"id": 42149,
							"name": "calculatePrice",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method calculates the price of a shipping method when it's created or its cart is refreshed.\n\nIn this method, you can send a request to your third-party provider to retrieve the prices. The first\nparameters holds the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of the shipping method's shipping option, which has fulfillment\nobject data returned by "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "getFulfillmentOptions",
										"target": 42135
									},
									{
										"kind": "text",
										"text": ".\n\nThe second parameter holds the "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property of the shipping method, which has data returned by "
									},
									{
										"kind": "inline-tag",
										"tag": "@link",
										"text": "validateFulfillmentData",
										"target": 42137
									},
									{
										"kind": "text",
										"text": ".\nIt can also hold custom data passed from the frontend during checkout.\n\nSo, using both of these data, assuming you're storing in them data related to the third-party service,\nyou can retrieve the calculated price of the shipping method."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The calculated price's details."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nimport { CalculateShippingOptionPriceDTO } from \"@medusajs/framework/types\"\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async calculatePrice(\n    optionData: CalculateShippingOptionPriceDTO[\"optionData\"],\n    data: CalculateShippingOptionPriceDTO[\"data\"],\n    context: CalculateShippingOptionPriceDTO[\"context\"]\n  ): Promise<CalculatedShippingOptionPrice> {\n    // assuming the client can calculate the price using\n    // the third-party service\n    const price = await this.client.calculate(data)\n    return {\n      calculated_amount: price,\n      // Update this boolean value based on your logic\n      is_calculated_price_tax_inclusive: true,\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 257,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L257"
								}
							],
							"parameters": [
								{
									"id": 42150,
									"name": "optionData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of a shipping option."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42151,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The shipping method's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property with custom data passed from the frontend."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42152,
									"name": "context",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The context details, such as the cart details."
											}
										]
									},
									"type": {
										"type": "intersection",
										"types": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../../../packages/core/types/src/fulfillment/common/cart.ts",
													"qualifiedName": "CartPropsForFulfillment"
												},
												"name": "CartPropsForFulfillment",
												"package": "@medusajs/types"
											},
											{
												"type": "unknown",
												"name": "{ [k: string]: unknown; from_location?: StockLocationDTO | undefined; } & CalculatedRMAShippingContext"
											}
										]
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
											"qualifiedName": "CalculatedShippingOptionPrice"
										},
										"name": "CalculatedShippingOptionPrice",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.calculatePrice"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.calculatePrice"
					}
				},
				{
					"id": 42153,
					"name": "createFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 307,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L307"
						}
					],
					"signatures": [
						{
							"id": 42154,
							"name": "createFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is created. If the method returns in the object a\n"
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, it's stored in the fulfillment's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property is useful when handling the fulfillment later,\nas you can access information useful for your integration, such as the ID in the\nthird-party provider.\n\nYou can also use this method to perform an action with the third-party fulfillment service\nsince a fulfillment is created, such as purchase a label."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object whose "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property is stored in the fulfillment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async createFulfillment(\n    data: Record<string, unknown>,\n    items: Partial<Omit<FulfillmentItemDTO, \"fulfillment\">>[],\n    order: Partial<FulfillmentOrderDTO> | undefined,\n    fulfillment: Partial<Omit<FulfillmentDTO, \"provider_id\" | \"data\" | \"items\">>\n  ): Promise<CreateFulfillmentResult> {\n    // assuming the client creates a fulfillment\n    // in the third-party service\n    const externalData = await this.client.create(\n      fulfillment,\n      items\n    )\n\n    return {\n      data: {\n        ...(fulfillment.data as object || {}),\n        ...externalData\n      }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 307,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L307"
								}
							],
							"parameters": [
								{
									"id": 42155,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipping method this fulfillment is created for."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42156,
									"name": "items",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The items in the fulfillment."
											}
										]
									},
									"type": {
										"type": "array",
										"elementType": {
											"type": "reference",
											"target": {
												"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
												"qualifiedName": "Partial"
											},
											"typeArguments": [
												{
													"type": "reference",
													"target": {
														"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
														"qualifiedName": "Omit"
													},
													"typeArguments": [
														{
															"type": "reference",
															"target": {
																"sourceFileName": "../../../../packages/core/types/src/fulfillment/common/fulfillment-item.ts",
																"qualifiedName": "FulfillmentItemDTO"
															},
															"name": "FulfillmentItemDTO",
															"package": "@medusajs/types"
														},
														{
															"type": "literal",
															"value": "fulfillment"
														}
													],
													"name": "Omit",
													"package": "typescript"
												}
											],
											"name": "Partial",
											"package": "typescript"
										}
									}
								},
								{
									"id": 42157,
									"name": "order",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The order this fulfillment is created for."
											}
										]
									},
									"type": {
										"type": "union",
										"types": [
											{
												"type": "intrinsic",
												"name": "undefined"
											},
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Partial"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/fulfillment/common/order.ts",
															"qualifiedName": "FulfillmentOrderDTO"
														},
														"name": "FulfillmentOrderDTO",
														"package": "@medusajs/types"
													}
												],
												"name": "Partial",
												"package": "typescript"
											}
										]
									}
								},
								{
									"id": 42158,
									"name": "fulfillment",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Partial"
										},
										"typeArguments": [
											{
												"type": "reference",
												"target": {
													"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
													"qualifiedName": "Omit"
												},
												"typeArguments": [
													{
														"type": "reference",
														"target": {
															"sourceFileName": "../../../../packages/core/types/src/fulfillment/common/fulfillment.ts",
															"qualifiedName": "FulfillmentDTO"
														},
														"name": "FulfillmentDTO",
														"package": "@medusajs/types"
													},
													{
														"type": "union",
														"types": [
															{
																"type": "literal",
																"value": "data"
															},
															{
																"type": "literal",
																"value": "items"
															},
															{
																"type": "literal",
																"value": "provider_id"
															}
														]
													}
												],
												"name": "Omit",
												"package": "typescript"
											}
										],
										"name": "Partial",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
											"qualifiedName": "CreateFulfillmentResult"
										},
										"name": "CreateFulfillmentResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.createFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.createFulfillment"
					}
				},
				{
					"id": 42159,
					"name": "cancelFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 335,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L335"
						}
					],
					"signatures": [
						{
							"id": 42160,
							"name": "cancelFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is canceled. Use it to perform operations\nwith the third-party fulfillment service."
									}
								],
								"blockTags": [
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async cancelFulfillment(data: Record<string, unknown>): Promise<any> {\n    // assuming the client cancels a fulfillment\n    // in the third-party service\n    const { external_id } = data as {\n      external_id: string\n    }\n    await this.client.cancel(external_id)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 335,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L335"
								}
							],
							"parameters": [
								{
									"id": 42161,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "any"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.cancelFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.cancelFulfillment"
					}
				},
				{
					"id": 42162,
					"name": "getFulfillmentDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 355,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L355"
						}
					],
					"signatures": [
						{
							"id": 42163,
							"name": "getFulfillmentDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents of a fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getFulfillmentDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 355,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L355"
								}
							],
							"parameters": [
								{
									"id": 42164,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getFulfillmentDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getFulfillmentDocuments"
					}
				},
				{
					"id": 42165,
					"name": "createReturnFulfillment",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 392,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L392"
						}
					],
					"signatures": [
						{
							"id": 42166,
							"name": "createReturnFulfillment",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method is used when a fulfillment is created for a return. If the method returns in the object a\n"
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property, it's stored in the fulfillment's "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property.\n\nThe "
									},
									{
										"kind": "code",
										"text": "`data`"
									},
									{
										"kind": "text",
										"text": " property is useful when handling the fulfillment later,\nas you can access information useful for your integration. For example, you\ncan store an ID for the fulfillment in the third-party service.\n\nUse this method to perform actions necessary in the third-party fulfillment service, such as\npurchasing a label for the return fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "An object containing "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " which is stored in the fulfillment's "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property and "
											},
											{
												"kind": "code",
												"text": "`labels`"
											},
											{
												"kind": "text",
												"text": " array which is used to create FulfillmentLabels."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async createReturnFulfillment(fulfillment: Record<string, unknown>): Promise<CreateFulfillmentResult> {\n    // assuming the client creates a fulfillment for a return\n    // in the third-party service\n    const externalData = await this.client.createReturn(\n      fulfillment\n    )\n\n    return {\n      data: {\n        ...(fulfillment.data as object || {}),\n        ...externalData\n      }\n    }\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 392,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L392"
								}
							],
							"parameters": [
								{
									"id": 42167,
									"name": "fulfillment",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The fulfillment's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
											"qualifiedName": "CreateFulfillmentResult"
										},
										"name": "CreateFulfillmentResult",
										"package": "@medusajs/types"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.createReturnFulfillment"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.createReturnFulfillment"
					}
				},
				{
					"id": 42168,
					"name": "getReturnDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 414,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L414"
						}
					],
					"signatures": [
						{
							"id": 42169,
							"name": "getReturnDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves documents for a return's fulfillment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getReturnDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 414,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L414"
								}
							],
							"parameters": [
								{
									"id": 42170,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getReturnDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getReturnDocuments"
					}
				},
				{
					"id": 42171,
					"name": "getShipmentDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 435,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L435"
						}
					],
					"signatures": [
						{
							"id": 42172,
							"name": "getShipmentDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents for a shipment."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The shipment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async getShipmentDocuments(data: any): Promise<never[]> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 435,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L435"
								}
							],
							"parameters": [
								{
									"id": 42173,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the shipmnet."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "array",
										"elementType": {
											"type": "intrinsic",
											"name": "never"
										}
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.getShipmentDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.getShipmentDocuments"
					}
				},
				{
					"id": 42174,
					"name": "retrieveDocuments",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "provider.ts",
							"line": 462,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L462"
						}
					],
					"signatures": [
						{
							"id": 42175,
							"name": "retrieveDocuments",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method retrieves the documents of a fulfillment of a certain type."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "The fulfillment's documents."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyFulfillmentProviderService extends AbstractFulfillmentProviderService {\n  // ...\n  async retrieveDocuments(\n    fulfillmentData: any,\n    documentType: any\n  ): Promise<void> {\n    // assuming the client retrieves documents\n    // from a third-party service\n    return await this.client.documents(\n      fulfillmentData,\n      documentType\n    )\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "provider.ts",
									"line": 462,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L462"
								}
							],
							"parameters": [
								{
									"id": 42176,
									"name": "fulfillmentData",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The "
											},
											{
												"kind": "code",
												"text": "`data`"
											},
											{
												"kind": "text",
												"text": " property of the fulfillment."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
											"qualifiedName": "Record"
										},
										"typeArguments": [
											{
												"type": "intrinsic",
												"name": "string"
											},
											{
												"type": "intrinsic",
												"name": "unknown"
											}
										],
										"name": "Record",
										"package": "typescript"
									}
								},
								{
									"id": 42177,
									"name": "documentType",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The document's type. For example, "
											},
											{
												"kind": "code",
												"text": "`invoice`"
											},
											{
												"kind": "text",
												"text": "."
											}
										]
									},
									"type": {
										"type": "intrinsic",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IFulfillmentProvider.retrieveDocuments"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IFulfillmentProvider.retrieveDocuments"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						42131
					]
				},
				{
					"title": "Properties",
					"children": [
						42126
					]
				},
				{
					"title": "Methods",
					"children": [
						42135,
						42137,
						42142,
						42145,
						42148,
						42153,
						42159,
						42162,
						42165,
						42168,
						42171,
						42174
					]
				}
			],
			"sources": [
				{
					"fileName": "provider.ts",
					"line": 65,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/fulfillment/provider.ts#L65"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/fulfillment/provider.ts",
						"qualifiedName": "IFulfillmentProvider"
					},
					"name": "IFulfillmentProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				42125
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"42124": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": ""
		},
		"42125": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService"
		},
		"42126": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.identifier"
		},
		"42135": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentOptions"
		},
		"42136": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentOptions"
		},
		"42137": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateFulfillmentData"
		},
		"42138": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateFulfillmentData"
		},
		"42139": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "optionData"
		},
		"42140": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42141": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "context"
		},
		"42142": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateOption"
		},
		"42143": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.validateOption"
		},
		"42144": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42145": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.canCalculate"
		},
		"42146": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.canCalculate"
		},
		"42147": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42148": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.calculatePrice"
		},
		"42149": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.calculatePrice"
		},
		"42150": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "optionData"
		},
		"42151": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42152": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "context"
		},
		"42153": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createFulfillment"
		},
		"42154": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createFulfillment"
		},
		"42155": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42156": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "items"
		},
		"42157": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "order"
		},
		"42158": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillment"
		},
		"42159": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.cancelFulfillment"
		},
		"42160": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.cancelFulfillment"
		},
		"42161": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42162": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentDocuments"
		},
		"42163": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getFulfillmentDocuments"
		},
		"42164": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42165": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createReturnFulfillment"
		},
		"42166": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.createReturnFulfillment"
		},
		"42167": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillment"
		},
		"42168": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getReturnDocuments"
		},
		"42169": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getReturnDocuments"
		},
		"42170": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42171": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getShipmentDocuments"
		},
		"42172": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.getShipmentDocuments"
		},
		"42173": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "data"
		},
		"42174": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.retrieveDocuments"
		},
		"42175": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "AbstractFulfillmentProviderService.retrieveDocuments"
		},
		"42176": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "fulfillmentData"
		},
		"42177": {
			"sourceFileName": "../../../../packages/core/utils/src/fulfillment/provider.ts",
			"qualifiedName": "documentType"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/fulfillment/provider.ts"
		},
		"reflections": {
			"1": 42124
		}
	}
}
