{
	"id": 60212,
	"name": "analytics-provider",
	"variant": "project",
	"kind": 1,
	"flags": {},
	"children": [
		{
			"id": 60213,
			"name": "AbstractAnalyticsProviderService",
			"variant": "declaration",
			"kind": 128,
			"flags": {},
			"comment": {
				"summary": [
					{
						"kind": "text",
						"text": "### constructor\n\nThe constructor allows you to access resources from the module's container using the first parameter,\nand the module's options using the second parameter.\n\nIf you're creating a client or establishing a connection with a third-party service, do it in the constructor.\n\n#### Example\n\n"
					},
					{
						"kind": "code",
						"text": "```ts\nimport { Logger } from \"@medusajs/framework/types\"\nimport { AbstractAnalyticsProviderService } from \"@medusajs/framework/utils\"\n\ntype InjectedDependencies = {\n  logger: Logger\n}\n\ntype Options = {\n  apiKey: string\n}\n\nclass MyAnalyticsProviderService extends AbstractAnalyticsProviderService {\n  protected logger_: Logger\n  protected options_: Options\n  static identifier = \"my-analytics\"\n  // assuming you're initializing a client\n  protected client\n\n  constructor (\n    { logger }: InjectedDependencies,\n    options: Options\n  ) {\n    super()\n\n    this.logger_ = logger\n    this.options_ = options\n\n    // assuming you're initializing a client\n    this.client = new Client(options)\n  }\n}\n\nexport default MyAnalyticsProviderService\n```"
					}
				]
			},
			"children": [
				{
					"id": 60214,
					"name": "identifier",
					"variant": "declaration",
					"kind": 1024,
					"flags": {
						"isStatic": true
					},
					"comment": {
						"summary": [
							{
								"kind": "text",
								"text": "Each analytics provider has a unique ID used to identify it. The provider's ID\nwill be stored as "
							},
							{
								"kind": "code",
								"text": "`aly_{identifier}_{id}`"
							},
							{
								"kind": "text",
								"text": ", where "
							},
							{
								"kind": "code",
								"text": "`{id}`"
							},
							{
								"kind": "text",
								"text": " is the provider's "
							},
							{
								"kind": "code",
								"text": "`id`"
							},
							{
								"kind": "text",
								"text": "\nproperty in the "
							},
							{
								"kind": "code",
								"text": "`medusa-config.ts`"
							},
							{
								"kind": "text",
								"text": "."
							}
						],
						"blockTags": [
							{
								"tag": "@example",
								"content": [
									{
										"kind": "code",
										"text": "```ts\nclass MyAnalyticsProviderService extends AbstractAnalyticsProviderService {\n  static identifier = \"my-analytics\"\n  // ...\n}\n```"
									}
								]
							}
						]
					},
					"sources": [
						{
							"fileName": "abstract-analytics-provider.ts",
							"line": 65,
							"character": 9,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L65"
						}
					],
					"type": {
						"type": "intrinsic",
						"name": "string"
					}
				},
				{
					"id": 60215,
					"name": "constructor",
					"variant": "declaration",
					"kind": 512,
					"flags": {},
					"signatures": [
						{
							"id": 60216,
							"name": "AbstractAnalyticsProviderService",
							"variant": "signature",
							"kind": 16384,
							"flags": {},
							"type": {
								"type": "reference",
								"target": 60213,
								"name": "AbstractAnalyticsProviderService",
								"package": "@medusajs/utils"
							}
						}
					]
				},
				{
					"id": 60219,
					"name": "track",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "abstract-analytics-provider.ts",
							"line": 96,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L96"
						}
					],
					"signatures": [
						{
							"id": 60220,
							"name": "track",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method tracks an event with the third-party analytics provider. The Analytics Module\nwill use this method in its "
									},
									{
										"kind": "code",
										"text": "`track`"
									},
									{
										"kind": "text",
										"text": " method if your provider is configured in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": ".\n\nYou can send the event to the third-party provider based on its semantics."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the event is tracked successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyAnalyticsProviderService extends AbstractAnalyticsProviderService {\n  // ...\n  async track(\n    data: ProviderTrackAnalyticsEventDTO\n  ): Promise<void> {\n    // track event to third-party provider\n    // or using custom logic\n    // for example:\n    this.client.track(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-analytics-provider.ts",
									"line": 96,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L96"
								}
							],
							"parameters": [
								{
									"id": 60221,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The event's details."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/analytics/mutations.ts",
											"qualifiedName": "TrackAnalyticsEventDTO"
										},
										"name": "TrackAnalyticsEventDTO",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAnalyticsProvider.track"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAnalyticsProvider.track"
					}
				},
				{
					"id": 60222,
					"name": "identify",
					"variant": "declaration",
					"kind": 2048,
					"flags": {},
					"sources": [
						{
							"fileName": "abstract-analytics-provider.ts",
							"line": 120,
							"character": 8,
							"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L120"
						}
					],
					"signatures": [
						{
							"id": 60223,
							"name": "identify",
							"variant": "signature",
							"kind": 4096,
							"flags": {},
							"comment": {
								"summary": [
									{
										"kind": "text",
										"text": "This method identifies an actor or group in the third-party analytics provider. The Analytics Module\nwill use this method in its "
									},
									{
										"kind": "code",
										"text": "`identify`"
									},
									{
										"kind": "text",
										"text": " method if your provider is configured in "
									},
									{
										"kind": "code",
										"text": "`medusa-config.ts`"
									},
									{
										"kind": "text",
										"text": "."
									}
								],
								"blockTags": [
									{
										"tag": "@returns",
										"content": [
											{
												"kind": "text",
												"text": "Resolves when the actor or group is identified successfully."
											}
										]
									},
									{
										"tag": "@example",
										"content": [
											{
												"kind": "code",
												"text": "```ts\nclass MyAnalyticsProviderService extends AbstractAnalyticsProviderService {\n  // ...\n  async identify(\n    data: ProviderIdentifyAnalyticsEventDTO\n  ): Promise<void> {\n    // identify actor or group in the analytics provider\n    // or using custom logic\n    // for example:\n    this.client.identify(data)\n  }\n}\n```"
											}
										]
									}
								]
							},
							"sources": [
								{
									"fileName": "abstract-analytics-provider.ts",
									"line": 120,
									"character": 8,
									"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L120"
								}
							],
							"parameters": [
								{
									"id": 60224,
									"name": "data",
									"variant": "param",
									"kind": 32768,
									"flags": {},
									"comment": {
										"summary": [
											{
												"kind": "text",
												"text": "The details of the actor or group."
											}
										]
									},
									"type": {
										"type": "reference",
										"target": {
											"sourceFileName": "../../../../packages/core/types/src/analytics/mutations.ts",
											"qualifiedName": "IdentifyAnalyticsEventDTO"
										},
										"name": "IdentifyAnalyticsEventDTO",
										"package": "@medusajs/types"
									}
								}
							],
							"type": {
								"type": "reference",
								"target": {
									"sourceFileName": "../../node_modules/typescript/lib/lib.es5.d.ts",
									"qualifiedName": "Promise"
								},
								"typeArguments": [
									{
										"type": "intrinsic",
										"name": "void"
									}
								],
								"name": "Promise",
								"package": "typescript"
							},
							"implementationOf": {
								"type": "reference",
								"target": -1,
								"name": "IAnalyticsProvider.identify"
							}
						}
					],
					"implementationOf": {
						"type": "reference",
						"target": -1,
						"name": "IAnalyticsProvider.identify"
					}
				}
			],
			"groups": [
				{
					"title": "Constructors",
					"children": [
						60215
					]
				},
				{
					"title": "Properties",
					"children": [
						60214
					]
				},
				{
					"title": "Methods",
					"children": [
						60219,
						60222
					]
				}
			],
			"sources": [
				{
					"fileName": "abstract-analytics-provider.ts",
					"line": 53,
					"character": 13,
					"url": "https://github.com/medusajs/medusa/blob/fc377a136006df0f1c3d5cb6e0be340a486a03f0/packages/core/utils/src/analytics/abstract-analytics-provider.ts#L53"
				}
			],
			"implementedTypes": [
				{
					"type": "reference",
					"target": {
						"sourceFileName": "../../../../packages/core/types/src/analytics/provider.ts",
						"qualifiedName": "IAnalyticsProvider"
					},
					"name": "IAnalyticsProvider",
					"package": "@medusajs/types"
				}
			]
		}
	],
	"groups": [
		{
			"title": "Classes",
			"children": [
				60213
			]
		}
	],
	"packageName": "@medusajs/utils",
	"symbolIdMap": {
		"60212": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": ""
		},
		"60213": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService"
		},
		"60214": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService.identifier"
		},
		"60219": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService.track"
		},
		"60220": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService.track"
		},
		"60221": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "data"
		},
		"60222": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService.identify"
		},
		"60223": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "AbstractAnalyticsProviderService.identify"
		},
		"60224": {
			"sourceFileName": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts",
			"qualifiedName": "data"
		}
	},
	"files": {
		"entries": {
			"1": "../../../../packages/core/utils/src/analytics/abstract-analytics-provider.ts"
		},
		"reflections": {
			"1": 60212
		}
	}
}
